import json
import logging
import time
from typing_extensions import override

from a2a.server.agent_execution import RequestContext
from a2a.server.events.event_queue import EventQueue
from a2a.types import TaskArtifactUpdateEvent, TaskStatusUpdateEvent, TaskState, TaskStatus
from a2a.utils import new_text_artifact

from src.shared.base_agent_executor import BaseAgentExecutor
from src.services.environment_manager.logic import EnvironmentManager
from .environment_helper import EnvironmentHelper
from src.shared.task_graph_management import TaskGraph
from src.shared.execution_task_graph_management import ExecutionTaskGraph
from src.shared.agent_state import AgentOperationalState

from .logic import DevelopmentAgentLogic

logger = logging.getLogger(__name__)


class DevelopmentAgentExecutor(BaseAgentExecutor):
    def __init__(self):
        logic = DevelopmentAgentLogic()
        super().__init__(
            agent_logic=logic,
            default_artifact_name="generated_code",
            default_artifact_description="Python code generated by the agent",
        )
        self.env_helper = EnvironmentHelper()
        logic.set_environment_manager(self.env_helper)
        self.current_environment_id: str | None = None
        self.execution_plan_id: str | None = None

    def _create_artifact_from_result(self, result_data: str, task) -> any:
        return new_text_artifact(
            name=self.default_artifact_name,
            description=self.default_artifact_description,
            text=result_data,
        )

    @override
    async def execute(self, context: RequestContext, event_queue: EventQueue) -> None:
        self.state = AgentOperationalState.WORKING
        self.current_task_id = context.current_task.id if context.current_task else None
        self.last_activity_time = time.time()
        self.status_detail = "processing"
        await self._notify_gra_of_status_change()

        message = context.message
        task = context.current_task
        if not message or not task:
            logger.error("Missing message or task in context")
            return

        user_input = self._extract_input_from_message(message)
        if not user_input:
            await event_queue.enqueue_event(
                TaskStatusUpdateEvent(
                    status=TaskStatus(state=TaskState.failed),
                    final=True,
                    contextId=task.contextId,
                    taskId=task.id,
                )
            )
            self._update_stats(False)
            return

        payload = json.loads(user_input)
        self.execution_plan_id = payload.get("execution_plan_id")
        self.current_environment_id = payload.get(
            "environment_id",
            EnvironmentManager.normalize_environment_id(self.execution_plan_id or "default"),
        )
        payload["environment_id"] = self.current_environment_id

        await self.env_helper.create_environment(self.current_environment_id)

        result = await self.agent_logic.process(json.dumps(payload), task.contextId)
        artifact = self._create_artifact_from_result(result, task)
        await event_queue.enqueue_event(
            TaskArtifactUpdateEvent(
                append=False,
                contextId=task.contextId,
                taskId=task.id,
                lastChunk=True,
                artifact=artifact,
            )
        )
        await event_queue.enqueue_event(
            TaskStatusUpdateEvent(
                status=TaskStatus(state=TaskState.completed),
                final=True,
                contextId=task.contextId,
                taskId=task.id,
            )
        )

        if self.execution_plan_id:
            try:
                TaskGraph(self.execution_plan_id).update_state(task.id, TaskState.COMPLETED, artifact_ref=artifact.artifactId)
                ExecutionTaskGraph(self.execution_plan_id).update_task_output(task.id, artifact_ref=artifact.artifactId, summary="code generated")
            except Exception as e:
                logger.error(f"Failed to update graphs: {e}")

        self._update_stats(True)
        self.state = AgentOperationalState.IDLE
        self.status_detail = "idle"
        await self._notify_gra_of_status_change()
